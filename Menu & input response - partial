// LCD1602 to Arduino with function parameters and char arrays.
//Nov 29 23:53
// Displaying menus, and moving from one menu item to the next by a single button push
//The code searches the char array looking for the next menu item, finds it and places the cursor under the first letter
//This skips menu items of any length and empty spaces.
//1 press of "left" or "right" button skips to the next menu item

#include <LiquidCrystal.h>
#define labelLED 2
#define spaceLED 3
#define textLED 4

enum stateOfbutton_t {unknown, select, left, up, down, RIGHT};

LiquidCrystal lcd(12, 11, 10, 9, 8, 7);// This is set on a simulator. May not match the actual hardware

stateOfbutton_t buttonState=unknown;// buttonState is used in other parts of the software

int8_t cursorCol;  //0.6.12 are the columns where the main menu items begin on row 0
bool cursorRow;  //row 0   0,5,13 row 1 menu item locations

char menu1Main [] {"Main Flicker Day Color OnOff EXIT"};//has an extra space between day & color to separate them, but that 1 space is not shown on LCD
char menu12Color[] {"Color: label1   label2 lab3 EXIT"}; // this is a 2nd level menu not currently used in this code


void displayCursor(int col, bool row){
lcd.setCursor(col,row);
 delay(500); // the delay is just here so the movement of the cursor can be seen for testing
}

void PrintMenu(char *menu ){
  int offset=0;
  for (uint8_t row = 0; row<2; row++){
   for(uint8_t i=0;i<16;i++){
   lcd.setCursor(i,row);//first 0-15 prints top row. then need skip one space in file to then print the second row
   offset = row * (17)+i; //the menu has an extra space in between upper & lower row that LCD doesn't have
   lcd.print(menu+offset) ;
   //delay(100);
   }
  }
}

///////////////////////////////////// LEFT                    //perhaps LEFT & RIGHT could be just one function but that may be complicated

int8_t FindLabelLeft(char *menu ){
//bool foundSpace=false;
bool row=1;  //test only
int startColumn=12; //TEST ONLY

//assuming 12,1 is where EXIT is displayed
lcd.setCursor(12,1);
lcd.cursor();// make cursor visible

int i=startColumn;
displayCursor(i, row);

//delay(500);
if(i==0) {i=15; row = !row;} 
else {//lcd.setCursor(5,1);lcd.print(i);
while(menu[i+(row*17)]!= ' ')
{ i--; 
 if(i<=0) {i=15; row = !row;}// move to other row far right col =15
 displayCursor(i, row);}
}
//found space between first lable and label to the left
digitalWrite(spaceLED, HIGH);
//delay(1000);

while(menu[i+(row*17)] == ' ')
 {i--; if(i<=0) {i=15; row = !row;}// move to other row far right col =15
  displayCursor(i, row);} //skip through blank spaces bewteen labels. 
  //Now found end of left label
  digitalWrite(textLED, HIGH);digitalWrite(spaceLED, LOW);
//delay(1000);

while(menu[i+(row*17)]!= ' ' && i>0)// if label starts at column 0, stop here
{ i--;
  displayCursor(i, row);}// skip through the left label till find space OR i=0 Label begins at 0 or at i+1
  //Now found label to the left
  digitalWrite(labelLED, HIGH);digitalWrite(textLED, LOW);
  lcd.setCursor(i+1,row); 
return (i+1); // not sure how this will be used - respond to SELECT button
}

//////////////RIGHT    similar to left. Difference is increment of index and how handle ends of LCD display

int FindLabelRight(char *menu){ //can left & right be combined?
bool row=1;  //test only
int startColumn=12; //TEST ONLY
//usually 12,1 is where EXIT is displayed

//lcd.setCursor(startColumn,row);

int i=startColumn;
displayCursor(i, row);
lcd.cursor();// make cursor visible
//delay(500);


if(i==15) {i=0; row = !row;} 
else {//lcd.setCursor(5,1);lcd.print(i);
while(menu[i+(row*17)]!= ' ')
{ i++; //displayCursor(i, row);delay(1000);
 if(i>=15) {i=0; row = !row; break;}// move to other row far right col =15
 displayCursor(i, row);}
}
//found space between first lable and label to the left
digitalWrite(spaceLED, HIGH);
//delay(500);

while(menu[i+(row*17)] == ' ')
 {i++; if(i>15) {i=0; row = !row;}// move to other row far right col =15
  displayCursor(i, row);} //skip through blank spaces bewteen labels. 
  //Now found end of left label
  digitalWrite(textLED, HIGH);digitalWrite(spaceLED, LOW);
//delay(1000);

while(menu[i+(row*17)]!= ' ' && i>15)// if label starts at column 15, stop here
{ i++;
  displayCursor(i, row);}// skip through the left label till find space OR i=0 Label begins at 0 or at i+1
  //Now found label to the left
  digitalWrite(labelLED, HIGH);digitalWrite(textLED, LOW);
  displayCursor(i, row);
  //lcd.setCursor(i,row); 

//lcd.setCursor(4,0);
//lcd.print(menu[(i+(row*17))]);

return (i+(row*17)); // not sure how this will be used - respond to SELECT button

}

void handleButtonState(){
  switch (buttonState){
case unknown: break;
case left:FindLabelLeft(menu1Main); break;
case RIGHT: FindLabelRight(menu1Main); break;
}
}




void setup() {
pinMode (2, OUTPUT); //digitalWrite(spaceLED, HIGH); // indicators which probably won't be in finished product
pinMode (3, OUTPUT); //digitalWrite(textLED, HIGH);
pinMode (4, OUTPUT); //digitalWrite(labelLED, HIGH);

lcd.begin(16, 2);

PrintMenu(menu1Main);

//lcd.setCursor(cursorCol,cursorRow);

//delay(100);


buttonState = RIGHT; // TEST only. The button State will be set by a function that reads input buttons

//handleButtonState();


buttonState = left;
handleButtonState();



}

void loop() {
  // ...
}
