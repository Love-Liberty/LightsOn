//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// LCD1602 to Arduino with function parameters and char arrays.
////Dec 7 23:59
// Displaying menus, and moving from one menu item to the next by a single button push
// 
// 
// 1 press of "left" or "right" button determins whether the menu item or EXIT is pointed to & will respond on clicking the 'select' button
// The buttons are connected to the analog input pin A0 
//"up" & "down" button moves up or down through the menu items
//Most menu items have a deeper level. Use left or right button to point the arrow towards the menu item and click select to go deeper
//To come out of any level either click UP or make the arrow point at EXIT and then click select
// Some was coded on an online simulator. This causes problems because
// when moving this to VSC/platformIO:
// Need #include<Arduino.h>
// Can't compare char array to string "Color" etc
// The "Color" etc have to be declared as char arrays.
// The pins of the LCD are different
// The values of the input buttons are different
// Some functions say they return, but don't - warning
// One has no return value - warning
//The simulator doesn't enforce the rules as closely as the compiler.
// ISO forbids... problems of comparing chars, literals and arrays. The simulator had allowed it.
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#include <Arduino.h>
#include <LiquidCrystal.h>

///////////////////// LED which are not needed. They could be used as indicators
//#define labelLED 2
//#define spaceLED 3
//#define textLED 4

// LiquidCrystal lcd(12, 11, 10, 9, 8, 7);// This is set on a simulator. May not theyMatch the actual hardware<<<<<
const int rs = 8, en = 9, d4 = 4, d5 = 5, d6 = 6, d7 = 7; // the read/write pin not connected
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);

////////////////////////////////////////////////  enums and global variables

enum stateOfbutton_t   // 5 push button inputs read by analogue voltage
{
    unknown,
    select,
    left,
    up,
    down,
    RIGHT
}; 
// The values read in the function will need to be changed to match the actual buttons/voltages if using a different set
stateOfbutton_t buttonState = unknown; // buttonState is used to record which button was pressed

enum stateOfMenu_t
{
    MenuUnknown, // initial state
    
    showMain1,
    
    show2Color,
    show2Flicker,
    show2Day,
    show2OnOff, // level 2 of hierarchy of menu

    show3Color,
    show3Flicker,
    show3Day,
    show3OnOff, // level 3

    showNoMenu
};

stateOfMenu_t menuState = MenuUnknown; // menuState records which menu is to be displayed or is being displayed
// (when bottom level of the menu reached the program needs to change to handle the actions required)

enum pointTo_t   // used to point to menu items on the lcd display
{
    arrowLeft,
    arrowRight
};

pointTo_t arrowPointer = arrowRight; // keep track of which direction the display arrow is pointing. Helps to determine what is called when the 'select' button pressed

////////////////////////////////////////////////  LCD output

void fancyPrint(char c)
{
    for (byte j = 0; j < 32; j++)
    {
        for (byte i = 0; i < 16; i++)
        {
            lcd.setCursor(i, 1);
            lcd.print(c);
        }
    }
}

void printName()
{
    lcd.setCursor(3, 0);

    lcd.print("LightsOn!");
}

void ShowProjectName()
{
    printName();
    fancyPrint('$');
    printName();
    fancyPrint(' ');
    printName();
    fancyPrint('*');
}

void displayTopRowMenuItems(const char *labelLeft, pointTo_t arrow, const char *labelRight)
{
    lcd.setCursor(0, 0);
    lcd.clear();
    lcd.print(labelLeft);
    if (arrow == arrowLeft)
        lcd.print("<-");
    else
        lcd.print("  "); // delete <-
    lcd.setCursor(10, 0);
    if (arrow == arrowRight)
        lcd.print("->");
    else
        lcd.print("  ");
    lcd.print(labelRight);
}

void DisplayInstructionsBottomRow()
{
    static int instructionToPrint = 0;

    // don't print if menustate == showNoMenu ??

    lcd.setCursor(0, 1);

    instructionToPrint++;
    if (instructionToPrint > 4)
        instructionToPrint = 0;

    switch (instructionToPrint)
    {
    case 1:
        lcd.print("Select confirms ");
        break;

    case 2:
        lcd.print("L R to change   ");
        break;

    case 3:
        lcd.print("Down to next..  ");
        break;

    case 4:
        lcd.print("Up to go back   ");
        break;

    default:
        break;
    }

    delay(100); // Serial.print(" displayBottom Print number: "); //Serial.print(instructionToPrint);
}


///\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\  Will need actions in decide What To Display -- to actually edit the LED settings.  Level 3? 4? <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< 

void decideWhatToDisplay(stateOfMenu_t menuState, pointTo_t arrowPointer)
{

    switch (menuState)
    {

    case showNoMenu:
        lcd.clear();
        ShowProjectName();
        break; // does this cause problems?

    case MenuUnknown:
        break; // does this cause problems?

    case showMain1:
        displayTopRowMenuItems("Main", arrowPointer, "EXIT");
        break;

    case show2Color:
        displayTopRowMenuItems("Color", arrowPointer, "EXIT");
        break;

    case show2Flicker:
        displayTopRowMenuItems("Flicker", arrowPointer, "EXIT");
        break;

    case show2Day:
        displayTopRowMenuItems("Day", arrowPointer, "EXIT");
        break;

    case show2OnOff:
        displayTopRowMenuItems("OnOff", arrowPointer, "EXIT");
        break;

    case show3Color:
        displayTopRowMenuItems("Colo3   ", arrowPointer, "EXIT"); // somewhere here the code has to carry out actions. Probably change to separate functions
        break;

    case show3Flicker:
        displayTopRowMenuItems("F3", arrowPointer, "EXIT");
        break;

    case show3OnOff:
        displayTopRowMenuItems("onOff3", arrowPointer, "EXIT");
        break;

    case show3Day:
        displayTopRowMenuItems("Day3", arrowPointer, "EXIT");
        break;
    }
}

//////////////////////////////////////////////// Change Menu levels

void moveDownToNextMenuLable(stateOfMenu_t &menuState, pointTo_t &arrowPointer)
{
    // Serial.print(" In moveDownToNextMenuLabel() "); //buttonState= ");
    arrowPointer = arrowRight; // point it at EXIT in new menu
    // pointTo_t {arrowLeft, arrowRight};
    ////Serial.print( buttonState);
    // Serial.print(" menuState =  ");
    // Serial.print(menuState);
    ////Serial.print(" arrowPointer = ");
    ////Serial.print( arrowPointer);

    switch (menuState)
    {

    case showNoMenu:
        break; // does this cause problems?

    case MenuUnknown:
        break; // does this cause problems?

    case showMain1:
        menuState = show2Color;
        break;

    case show2Color:
        menuState = show2Flicker;
        break;

    case show2Flicker:
        menuState = show2Day;
        break;

    case show2Day:
        menuState = show2OnOff;
        break;

    case show2OnOff:
        menuState = showMain1;
        break;

    case show3Flicker:
        break;

    case show3OnOff:
        break;

    case show3Day:
        break;

    case show3Color:
        break;
    }
}

void moveUPToPreviousMenuLable(stateOfMenu_t &menuState, pointTo_t &arrowPointer)
{
    // Serial.print(" In moveUPToPreviousMenuLable() ");

    arrowPointer = arrowRight; // point it at EXIT in new menu
    // pointTo_t {arrowLeft, arrowRight};
    ////Serial.print( buttonState);
    // Serial.print(" menuState =  ");
    // Serial.print(menuState);
    ////Serial.print(" arrowPointer = ");
    ////Serial.print( arrowPointer);

    switch (menuState)
    {

    case showNoMenu:
        break; // does this cause problems?

    case MenuUnknown:
        break; // does this cause problems?

    case showMain1:
        menuState = show2OnOff;
        break;

    case show2Color:
        menuState = showMain1;
        break;

    case show2Flicker:
        menuState = show2Color;
        break;

    case show2Day:
        menuState = show2Flicker;
        break;

    case show2OnOff:
        menuState = show2Day;
        break;

    case show3Flicker:
        menuState = show2Flicker;
        break;

    case show3OnOff:
        menuState = show2OnOff;
        break;

    case show3Day:
        menuState = show2Day;
        break;

    case show3Color:
        menuState = show2Color;
        break;
    }
}

///////////////////////////////////////////////// Respond to user input

void respondToButtonState(stateOfMenu_t &menuState, pointTo_t &arrowPointer, stateOfbutton_t buttonState)
{

    // working: button state  down 3,  up 4,  left 2, right 5 / left  select on color & flicker
    //  not working button state select on exit . left select on others

    // need take into acount menu state & button state
    // Serial.print(" In Respond  buttonState= ");
    // Serial.print( buttonState);
    // Serial.print(" menuState =  ");
    // Serial.print(menuState);
    // Serial.print(" arrowPointer = ");
    // Serial.print( arrowPointer);

    //                  LEFT or RIGHT
    // pointTo_t {arrowLeft, arrowRight};
    if (buttonState == left || buttonState == RIGHT)
    { // swap direction of arrow
        if (arrowPointer == arrowLeft)
            arrowPointer = arrowRight;
        else if (arrowPointer == arrowRight)
            arrowPointer = arrowLeft;
    }

    // Serial.print(" checked LRUD ArrowPointer==");
    // Serial.print(arrowPointer);

    //                    UP or DOWN
    if (buttonState == down)
        moveDownToNextMenuLable(menuState, arrowPointer);
    else if (buttonState == up)
        moveUPToPreviousMenuLable(menuState, arrowPointer);

    else

        //                      SELECT

        if (buttonState == select)
        {
            // depends on menu and arrow
            // Serial.print(" select ");
            switch (menuState)
            {

            case showNoMenu:
                if (buttonState != unknown)
                    menuState = MenuUnknown; // any button changes state
                buttonState = unknown;
                break; // does this cause problems?

            case MenuUnknown:
                if (buttonState)
                    menuState = showMain1;
                buttonState = unknown;
                break; // does this cause problems?

            case showMain1:
                if (arrowPointer == arrowLeft)
                {
                    menuState = showNoMenu;
                    buttonState = unknown;
                    arrowPointer = arrowRight;
                }
                else if (arrowPointer == arrowRight)
                {
                    menuState = showNoMenu;
                    buttonState = unknown;
                }
                ShowProjectName();
                break;

                // clicking either MAIN or Exit means exit

            case show2Color:
                if (arrowPointer == arrowLeft)
                {
                    menuState = show3Color;
                    buttonState = unknown;
                }
                else if (arrowPointer == arrowRight)
                {
                    menuState = showMain1;
                    buttonState = unknown;
                }
                break;
                // Right is always pointing to exit? So go up one level of menu

            case show2Flicker:
                if (arrowPointer == arrowLeft)
                {
                    menuState = show3Flicker;
                    buttonState = unknown;
                }
                else if (arrowPointer == arrowRight)
                {
                    menuState = showMain1;
                    buttonState = unknown;
                }
                break;
                // Right is always pointing to exit? So go up one level of menu break;

            case show2Day:
                if (arrowPointer == arrowLeft)
                {
                    menuState = show3Day;
                    buttonState = unknown;
                }
                else if (arrowPointer == arrowRight)
                {
                    menuState = showMain1;
                    buttonState = unknown;
                }
                break;
                // Right is always pointing to exit? So go up one level of menu break;

            case show2OnOff:
                if (arrowPointer == arrowLeft)
                {
                    menuState = show3OnOff;
                    buttonState = unknown;
                }
                else if (arrowPointer == arrowRight)
                {
                    menuState = showMain1;
                    buttonState = unknown;
                }
                break;
                // Right is always pointing to exit? So go up one level of menu break;

            case show3Flicker:
                if (arrowPointer == arrowLeft)
                {
                    menuState = show3Flicker;
                    buttonState = unknown;
                }
                else if (arrowPointer == arrowRight)
                {
                    menuState = show2Flicker;
                    buttonState = unknown;
                }
                break;
                // Right is always pointing to exit? So go up one level of menu break;

            case show3OnOff:
                if (arrowPointer == arrowLeft)
                {
                    menuState = show3OnOff;
                    buttonState = unknown;
                }
                else if (arrowPointer == arrowRight)
                {
                    menuState = show2OnOff;
                    buttonState = unknown;
                }
                break;
                // Right is always pointing to exit? So go up one level of menu break;

            case show3Color:
                if (arrowPointer == arrowLeft)
                {
                    menuState = show3Color;
                    buttonState = unknown;
                }
                else if (arrowPointer == arrowRight)
                {
                    menuState = show2Color;
                    buttonState = unknown;
                }
                break;
                // Right is always pointing to exit? So go up one level of menu break;

            case show3Day:
                if (arrowPointer == arrowLeft)
                {
                    menuState = show3Day;
                    buttonState = unknown;
                }
                else if (arrowPointer == arrowRight)
                {
                    menuState = show2Day;
                    buttonState = unknown;
                }
                break;
                // Right is always pointing to exit? So go up one level of menu break;

            default:
                break;
            }
        }
    // Serial.print(" leaving Rspond  buttonState= ");
    // Serial.print( buttonState);
    // Serial.print(" menuState = >");
    // Serial.print(menuState);
    // Serial.print("< arrowPointer = ");
    // Serial.println( arrowPointer);
    // Serial.println();

    buttonState = unknown; // try to prevent double response to buttons
}

void readButtonDefineState()
{ // if any button, set lights to 'idle' or stay out of system loop?
    // only comes here if a button is pressed
    //  Need to delay response to long clicks as it gets called many times
    // for (int i = 0; i < 8; i++)
    // Serial.print(" A0= ");
    // Serial.print(analogRead(A0));

    // Serial.print(" buttonState= ");
    // Serial.print(buttonState);
    // Serial.print(" ");
    // Serial.print(" menuState= ");
    // Serial.print(menuState);
    // Serial.print(" ");

    if (menuState == MenuUnknown) // first call to this function.
    {                             // get ready to display the main menu but ignore which button was pressed
        menuState = showMain1;    // lcd.cursor(); // not need to be visible
    }                             // don't respond further to first button press
    else
    {   // if not first button press do respond to it
        // lcd.cursor();
        if (analogRead(A0) > 900)
            buttonState = unknown; // 1023 when no button pressed
        else if (analogRead(A0) > 500)
            buttonState = select; // 640/641  <---- need act on this<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
        else if (analogRead(A0) > 380)
            buttonState = left; // 412/413
        else if (analogRead(A0) > 220)
            buttonState = down; // 259/260
        else if (analogRead(A0) > 90)
            buttonState = up; // 102/103
        else if (analogRead(A0) < 10)
            buttonState = RIGHT; // 0/0
    }

    /*
      //Serial.print(" After switch ");
      //Serial.print(" menuState= ");
      //Serial.print(menuState);
      //Serial.print(" ");
    */
    // for(int i=0;i<7;i++){
    digitalWrite(2, LOW);
    digitalWrite(3, LOW);
    digitalWrite(4, LOW);

    if (menuState == showNoMenu) // the user recently clicked EXIT, the project name is displayed. The finger may still be on the button. Don't respond yet
    {
        menuState = MenuUnknown;
        buttonState = unknown; // don't react to button (if left it would search in project name and then display main. Cute but select doesn't cause main to be displayed)

    } //
}

//////////////////////////////// setup

void setup()
{
    lcd.begin(16, 2);
    // Serial.begin(9600);
    // Serial.println("Newer method");

    ShowProjectName();
    // delay(1000);
}

//////////////////////////////////////////////// Loop

void loop()
{ //  this loop should be separate from main LED loop or the other parts just idle?

    // check If Any Button Pressed();
    if (analogRead(A0) < 1000)
    {
        readButtonDefineState();

        fancyPrint('%'); // this is to slow response down when button is pressed.
        fancyPrint(' '); // Even a short push of the button would be read more than once if there were no delay
        fancyPrint('%'); // continued pressure does allow repeats
        fancyPrint('.');

        respondToButtonState(menuState, arrowPointer, buttonState);

       decideWhatToDisplay(menuState, arrowPointer);
        if (menuState != showNoMenu)
            DisplayInstructionsBottomRow();
    }
}

/////////////////////////////////////// end of interface code
